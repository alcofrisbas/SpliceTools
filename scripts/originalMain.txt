"""def main():
    Ns = 512                                            
    H = 128
    startTime = time.time()
    consFile = "../Morgan_44.1/Mod/Mod_20.wav"
    vowelFile = "../Morgan_44.1/Ah Main/Ah Main_20.wav"
    cfL = 1000

    consX, consFS = soundToArray(consFile)
    #print consX, consFS
    vowelX, vowelFS = soundToArray(vowelFile)
    #print vowelX, vowelFS
    if consFS != vowelFS:
        raise ValueError("Please use samples with matching Sample Rates")
    vowelPadMs = 700
    vowelX, vowelFS = zeroPad(vowelX, vowelFS, 700)     #add .7 seconds to vowel

    conshfreq, conshmag, conshphase, consxr = fourierResidual(consX, consFS)
                                                        #construct harmonic arrays from consonant sound
    vowelhfreq, vowelhmag, vowelhphase, vowelxr = fourierResidual(vowelX, vowelFS)
                                                        #construct harmonic arrays from padded vowel sound
    vowelPadF = (vowelPadMs/1000.0)*framesPerSecond2(soundLength(vowelX, vowelFS), numFrames(vowelhfreq))
    cfLF = cfL/samplesPerFrame(consX, conshfreq)
    print cfL, cfLF
    pad = 25
    
    
    freqStable = stablePoint(conshfreq, 0, 100, 20, pad)        #find the stable point of the frequency
    magStable =  stablePoint(conshmag, 0, 40, 10, pad)      #find the stable point of the magnitude
    print freqStable, magStable
    stable = max(freqStable, magStable)             #find the stable point of both frequency and magnitude
    print conshfreq.shape[0]
    if stable == conshfreq.shape[0]+pad:
        stable = min(freqStable, magStable)
    print stable 
    
    adjustMagnitude(conshmag, vowelhmag, stable, vowelPadF)

    consFreqF0 = infoAt(conshfreq, stable)              #find the f0 frequency of the consonant at the stable point
    vowelFreqF0 = infoAt(vowelhfreq, 1.0*framesPerSecond(vowelFS, samplesPerFrame(vowelX, vowelhfreq)))
    print "consFreq:",consFreqF0
    print "vowelFreq:",vowelFreqF0
    pR = pitchRatio(consFreqF0, vowelFreqF0)            #find the pitch ration between the frequencies
    #print pR
    #print soundLength(consX, consFS), numFrames(conshfreq)
    initialNumFrames = numFrames(conshfreq)
    if pR != 1:
        consX = retune(consFS, consX, 1.0/pR)               #stretch or shrink the consonant as necessary
    
    conshfreq, conshmag, conshphase, consxr = fourierResidual(consX, consFS)#re-harmonic-ize the consonant
    afterRetuneNumFrames = numFrames(conshfreq)
    stable = int(stable*(float(afterRetuneNumFrames)/initialNumFrames))#calculate where the stable frame is after the retune
    #print stable, newStable
    consFreqF0 = infoAt(conshfreq, stable)              #find the new frequency at the new stable point
    #print soundLength(consX, consFS), numFrames(conshfreq)
    #print pitchRatio(consFreqF0, vowelFreqF0)
    print stable
    print "fps",framesPerSecond2(soundLength(consX, consFS), numFrames(conshfreq))

    padAmount = 1000 - (stable*samplesPerFrame(consX, conshfreq)/consFS)*1000
                                                        #set pad amount to line up the consonant \/ \/ \/ \/
    consX, consFS = zeroPad(consX, consFS, padAmount)           #add enough samples to put the cut point at 1 second into consonant
    #print padAmount* 
    #print phaseAt(conshphase, stable)                  #this works because conssphase has not been changed to reflect the pad amount yet
    #print phaseAt()

    conshfreq, conshmag, conshphase, consxr = fourierResidual(consX, consFS)
                                                        #construct harmonic arrays from paddedconsonant sound
    
    
    stable += padAmount/1000*framesPerSecond2(soundLength(consX, consFS), numFrames(conshfreq))
    print stable
    crossFadePitch(conshfreq, vowelhfreq, int(stable), cfLF)
    adjustPhase(H, consFS, conshfreq, conshphase, int(cfLF), int(stable), vowelhphase)
    
    consX, consXH = makeSound(conshfreq, conshmag, conshphase, consxr, Ns, H, consFS)

    consPhase = infoAt(conshphase, 1.0*framesPerSecond(consFS, samplesPerFrame(consX, conshfreq)))
    vowelPhase = infoAt(vowelhphase, 1.0*framesPerSecond(vowelFS, samplesPerFrame(vowelX, vowelhfreq)))
    
    consFreqF0 = infoAt(conshfreq, 1.0*framesPerSecond(consFS, samplesPerFrame(consX, conshfreq)))
    sf.write("output_sounds/Cons.wav", consX, consFS)
    simpleXFade(consX, vowelX, consFS, stable, cfL, conshfreq)
    #print f0phaseShiftAmount(consPhase, vowelPhase, consFS, consFreqF0)
    print "elapsed time: {}".format(time.time()-startTime)"""
